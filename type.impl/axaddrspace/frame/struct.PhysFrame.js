(function() {
    var type_impls = Object.fromEntries([["axvisor_api",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-PhysFrame%3CH%3E\" class=\"impl\"><a href=\"#impl-Debug-for-PhysFrame%3CH%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;H&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for PhysFrame&lt;H&gt;<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> + AxMmHal,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","axvisor_api::memory::PhysFrame"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Drop-for-PhysFrame%3CH%3E\" class=\"impl\"><a href=\"#impl-Drop-for-PhysFrame%3CH%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;H&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/drop/trait.Drop.html\" title=\"trait core::ops::drop::Drop\">Drop</a> for PhysFrame&lt;H&gt;<div class=\"where\">where\n    H: AxMmHal,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.drop\" class=\"method trait-impl\"><a href=\"#method.drop\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/drop/trait.Drop.html#tymethod.drop\" class=\"fn\">drop</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Executes the destructor for this type. <a href=\"https://doc.rust-lang.org/nightly/core/ops/drop/trait.Drop.html#tymethod.drop\">Read more</a></div></details></div></details>","Drop","axvisor_api::memory::PhysFrame"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PhysFrame%3CH%3E\" class=\"impl\"><a href=\"#impl-PhysFrame%3CH%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;H&gt; PhysFrame&lt;H&gt;<div class=\"where\">where\n    H: AxMmHal,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.alloc\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">alloc</a>() -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;PhysFrame&lt;H&gt;, AxError&gt;</h4></section></summary><div class=\"docblock\"><p>Allocate a [<code>PhysFrame</code>].</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.alloc_zero\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">alloc_zero</a>() -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;PhysFrame&lt;H&gt;, AxError&gt;</h4></section></summary><div class=\"docblock\"><p>Allocate a [<code>PhysFrame</code>] and fill it with zeros.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.uninit\" class=\"method\"><h4 class=\"code-header\">pub const unsafe fn <a class=\"fn\">uninit</a>() -&gt; PhysFrame&lt;H&gt;</h4></section></summary><div class=\"docblock\"><p>Create an uninitialized [<code>PhysFrame</code>].</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>The caller must ensure that the [<code>PhysFrame</code>] is only used as a placeholder and never\naccessed.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.start_paddr\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">start_paddr</a>(&amp;self) -&gt; <a class=\"struct\" href=\"axvisor_api/memory/struct.PhysAddr.html\" title=\"struct axvisor_api::memory::PhysAddr\">PhysAddr</a></h4></section></summary><div class=\"docblock\"><p>Get the starting physical address of the frame.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut_ptr\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">as_mut_ptr</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.pointer.html\">*mut </a><a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.u8.html\">u8</a></h4></section></summary><div class=\"docblock\"><p>Get a mutable pointer to the frame.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.fill\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">fill</a>(&amp;mut self, byte: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.u8.html\">u8</a>)</h4></section></summary><div class=\"docblock\"><p>Fill the frame with a byte. Works only when the frame is 4 KiB in size.</p>\n</div></details></div></details>",0,"axvisor_api::memory::PhysFrame"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[6004]}