var searchIndex = new Map(JSON.parse('[["axvisor_api",{"t":"XXCCCCCHFIFNNNNHHNNNNNNNNNNNNNNNNNNHHNNNNNNNNNNNNNNNNNNNNNNHNNNNNNNNNNNNNNHIIIIHHHHHHHHHIIIHHHHHHHH","n":["api_mod","api_mod_impl","arch","host","memory","time","vmm","get_host_cpu_num","PhysAddr","PhysFrame","VirtAddr","add","","add_assign","","alloc_contiguous_frames","alloc_frame","as_mut_ptr","as_mut_ptr_of","as_ptr","as_ptr_of","as_usize","","borrow","","borrow_mut","","clone","","clone_into","","clone_to_uninit","","cmp","","dealloc_contiguous_frames","dealloc_frame","default","","eq","","fmt","","","","","","from","","","","from_mut_ptr_of","from_ptr_of","from_usize","","into","","partial_cmp","","phys_to_virt","sub","","","","sub_assign","","to_owned","","try_from","","try_into","","type_id","","virt_to_phys","CancelToken","Nanos","Ticks","TimeValue","cancel_timer","current_ticks","current_time","current_time_nanos","nanos_to_ticks","register_timer","ticks_to_nanos","ticks_to_time","time_to_ticks","InterruptVector","VCpuId","VMId","active_vcpus","current_vcpu_id","current_vm_active_vcpus","current_vm_id","current_vm_vcpu_num","inject_interrupt","notify_vcpu_timer_expired","vcpu_num"],"q":[[0,"axvisor_api"],[7,"axvisor_api::host"],[8,"axvisor_api::memory"],[75,"axvisor_api::time"],[88,"axvisor_api::vmm"],[99,"memory_addr::addr"],[100,"core::option"],[101,"core::cmp"],[102,"core::fmt"],[103,"core::result"],[104,"core::any"],[105,"core::ops::function"],[106,"alloc::boxed"],[107,"axvisor_api_proc"]],"i":"```````````df10``000010101010101010``1010111000110000101010`11001010101010`````````````````````````","f":"```````{{}b}```{{db}d}{{fb}f}{{{j{hd}}b}l}{{{j{hf}}b}l}{{bb}{{n{d}}}}{{}{{n{d}}}}{fA`}{f}10{db}{fb}{j{{j{c}}}{}}0{{{j{h}}}{{j{hc}}}{}}0{{{j{d}}}d}{{{j{f}}}f}{{j{j{hc}}}l{}}0{{jA`}l}0{{{j{d}}{j{d}}}Ab}{{{j{f}}{j{f}}}Ab}{{db}l}{dl}{{}d}{{}f}{{{j{d}}{j{d}}}Ad}{{{j{f}}{j{f}}}Ad}{{{j{d}}{j{hAf}}}{{Aj{lAh}}}}00{{{j{f}}{j{hAf}}}{{Aj{lAh}}}}00{bd}{cc{}}0{bf}7720{{}c{}}0{{{j{d}}{j{d}}}{{n{Ab}}}}{{{j{f}}{j{f}}}{{n{Ab}}}}{df}{{dd}b}{{db}d}{{fb}f}{{ff}b}{{{j{hd}}b}l}{{{j{hf}}b}l}{jc{}}0{c{{Aj{e}}}{}{}}0{{}{{Aj{c}}}{}}0{jAl}0{fd}````{Anl}{{}B`}{{}Bb}{{}Bd}{BdB`}{{Bb{Bh{Bf}}}An}{B`Bd}{B`Bb}{BbB`}```{Bj{{n{b}}}}{{}Bl}{{}b}{{}Bj}1{{BjBlBn}l}{{BjBl}l}5","D":"G`","p":[[1,"usize"],[5,"PhysAddr",8,99],[5,"VirtAddr",8,99],[0,"mut"],[1,"reference",null,null,1],[1,"unit"],[6,"Option",100,null,1],[1,"u8"],[6,"Ordering",101],[1,"bool"],[5,"Formatter",102],[5,"Error",102],[6,"Result",103,null,1],[5,"TypeId",104],[8,"CancelToken",75],[8,"Ticks",75],[8,"TimeValue",75],[8,"Nanos",75],[10,"FnOnce",105],[5,"Box",106,null,1],[8,"VMId",88],[8,"VCpuId",88],[8,"InterruptVector",88]],"r":[[0,107],[1,107],[8,99],[10,99],[11,99],[12,99],[13,99],[14,99],[17,99],[18,99],[19,99],[20,99],[21,99],[22,99],[23,99],[24,99],[25,99],[26,99],[27,99],[28,99],[29,99],[30,99],[31,99],[32,99],[33,99],[34,99],[37,99],[38,99],[39,99],[40,99],[41,99],[42,99],[43,99],[44,99],[45,99],[46,99],[47,99],[48,99],[49,99],[50,99],[51,99],[52,99],[53,99],[54,99],[55,99],[56,99],[57,99],[58,99],[60,99],[61,99],[62,99],[63,99],[64,99],[65,99],[66,99],[67,99],[68,99],[69,99],[70,99],[71,99],[72,99],[73,99]],"b":[[41,"impl-UpperHex-for-PhysAddr"],[42,"impl-LowerHex-for-PhysAddr"],[43,"impl-Debug-for-PhysAddr"],[44,"impl-Debug-for-VirtAddr"],[45,"impl-UpperHex-for-VirtAddr"],[46,"impl-LowerHex-for-VirtAddr"],[60,"impl-Sub-for-PhysAddr"],[61,"impl-Sub%3Cusize%3E-for-PhysAddr"],[62,"impl-Sub%3Cusize%3E-for-VirtAddr"],[63,"impl-Sub-for-VirtAddr"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAACsABgAMAAMAGAALACYACgAzAAAAOgABAD0ADQA=","P":[[23,"T"],[27,""],[29,"T"],[31,""],[48,"T"],[50,""],[55,"U"],[57,""],[66,"T"],[68,"U,T"],[70,"U"],[72,""]]}]]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
//{"start":39,"fragment_lengths":[3653]}